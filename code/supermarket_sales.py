# -*- coding: utf-8 -*-
"""Supermarket Sales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/153gIce6bIAMazOJQjaRYpc69mRDyTkmm
"""

# prompt: install open ai

!pip install pandasai

# prompt: import pandas, numpy, mathplolib,seaborn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# from pandasai import SmartDataframe
# from pandasai.llm.openai import OpenAI

# key="api-key"
# llm=OpenAI(api_token=key)

# prompt: import dataset from sheet with link : https://docs.google.com/spreadsheets/d/17YaHNjOzuiEgfZz3oZTKdmx9HDxKbjF13YsQJCVm1xc/edit?gid=1903509374#gid=1903509374

import pandas as pd
sheet_url = "https://docs.google.com/spreadsheets/d/1KTFG4vYJ3O-4Kh5V89EnnvL3vyof1eEK0DfR4TolUAo/edit#gid=833888028"
csv_url = sheet_url.replace("/edit#gid=", "/export?format=csv&gid=")
df = pd.read_csv(csv_url)

# Now you can work with the dataframe 'df'
# Example: print the first 5 rows
df.head()

df.info()

"""mengubah tipe data di Date menjadi datetime

"""

#mengubah tipedata di date
df_clean=df.copy()
df_clean['Date']=pd.to_datetime(df_clean['Date'])
# df_clean['Reveneu'] = df_clean['Unit price'] * df_clean['Quantity']

df_clean.info()

df_clean.head()

#CHECK TYPO SETIAP COLUMN

# prompt: check unique and count at column Payment	Branch	City	Customer type	Gender	Product line

# Check unique values and counts for specified columns
columns_to_check = ['Payment', 'Branch', 'City', 'Customer type', 'Gender', 'Product line']

for col in columns_to_check:
  print(f"\nUnique values and counts for column '{col}':")
  print(df_clean[col].value_counts())

# prompt: in column Gender, change male to Male, female to Female, fml to Female

# Replace values in the 'Gender' column
df_clean['Gender'] = df_clean['Gender'].replace({'male': 'Male', 'female': 'Female', 'fml': 'Female'})

# Verify the changes
print(df_clean['Gender'].value_counts())

#CHECK TYPO SETIAP COLUMN

# prompt: check unique and count at column Payment	Branch	City	Customer type	Gender	Product line

# Check unique values and counts for specified columns
for col_name in ['Payment', 'Branch', 'City', 'Customer type', 'Gender', 'Product line']:
    print(df_clean[col_name].value_counts(),'\n')

print(df_clean['Gender'].value_counts(),'\n')

# prompt: cek Invoice ID is have a duplicate or not

# Check for duplicate Invoice IDs
# duplicate_invoice_ids = df_clean[df_clean.duplicated(subset=['Invoice ID'], keep=False)]

# if not duplicate_invoice_ids.empty:
#     print("Duplicate Invoice IDs found:")
#     print(duplicate_invoice_ids[['Invoice ID']])
# else:
#     print("No duplicate Invoice IDs found.")

df_clean['Invoice ID'].duplicated().sum()

# prompt: save df_clean and download as csv

from google.colab import files
df_clean.to_csv('df_clean.csv', encoding = 'utf-8-sig')
files.download('df_clean.csv')

"""#EDA

##Daily Trend
"""

df_clean.head()

#Daily Tren Overall

agg_daily=df_clean.groupby('Date',as_index=False)['Reveneu','Quantity'].sum()
agg_daily

sns.lineplot(data=agg_daily, x='Date', y='Reveneu')

pandas_ai_df = SmartDataframe(df_clean, config={"llm": llm})
chart_ai = pandas_ai_df.chat('create trend line for reveneu with seaborn with dark background')
chart_ai

"""# By Payment"""

agg_payment=df_clean.groupby('Payment',as_index=False).agg({'Reveneu':'sum','Invoice ID':'nunique'})
agg_payment

# prompt: create bar chart betweet payment and count invoice ID. give count in bar.sorting descending

import matplotlib.pyplot as plt

# Assuming 'agg_payment' DataFrame is already created as shown in the previous code

agg_payment_sorted = agg_payment.sort_values(by='Invoice ID', ascending=False)

plt.figure(figsize=(10, 6))
plt.bar(agg_payment_sorted['Payment'], agg_payment_sorted['Invoice ID'])
plt.xlabel("Payment Method")
plt.ylabel("Number of Invoices")
plt.title("Number of Invoices per Payment Method (Sorted Descending)")
plt.xticks(rotation=45, ha="right")  # Rotate x-axis labels for better readability

# Add the count on top of each bar
for i, count in enumerate(agg_payment_sorted['Invoice ID']):
    plt.text(i, count, str(count), ha='center', va='bottom')

plt.tight_layout()
plt.show()

pandas_ai_df = SmartDataframe(df_clean, config={"llm": llm})
chart_ai = pandas_ai_df.chat('create bar chart betweet payment and count invoice ID. give count in bar.sorting descending. use pastel aesthetic color')
# chart_ai = pandas_ai_df.chat('create bar chart for each payment reveneu, sort from highest')

# Menampilkan grafik
chart_ai

"""Pie Chart"""

plt.pie(agg_payment_sorted['Invoice ID'], labels=agg_payment_sorted['Payment'], autopct='%1.1f%%')
plt.title('Payment Percentage')
plt.show()

pandas_ai_df = SmartDataframe(df_clean, config={"llm": llm})
chart_ai = pandas_ai_df.chat('create pie chart of reveneu each payment type')
chart_ai

agg_gender=df_clean.groupby(['Gender','Product line'],as_index=False)['Invoice ID'].nunique()
agg_gender.head()

plt.rcParams["figure.figsize"] = [20, 5]

sns.barplot(data=agg_gender, x='Product line', y='Invoice ID', hue='Gender')

pandas_ai_df = SmartDataframe(df_clean, config={"llm": llm})
chart_ai = pandas_ai_df.chat('create bar chart if product line, with value of count invoice id, split by gender')
# chart_ai = pandas_ai_df.chat('create bar chart for each payment reveneu, sort from highest')

# Menampilkan grafik
chart_ai

pandas_ai_df = SmartDataframe(df_clean, config={"llm": llm})
chart_ai = pandas_ai_df.chat('which product line to be improved? and why?')
# chart_ai = pandas_ai_df.chat('create bar chart for each payment reveneu, sort from highest')

# Menampilkan grafik
chart_ai